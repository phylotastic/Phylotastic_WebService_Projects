We developed this for phylomedb.org, although it has not been changed since then (~2011). It was a complicate approach, I know. 

There is another option, which would be: 
- generating tree images as PNG using tree.render and receiving the dictionary returned by the render function. 
- The dictionary is a map of absolute coordinates of nodes and faces in the tree image. You can code your own HTML img_map and add any javascript action to nodes. 

webplugin is supposed to facilitate the same process by also providing some basic functionality such as node searching etc..., this requires comunicating with a python interpreter and therefore operating with trees. 

There are also plans to generate interactive SVGs, but still far from production.  


=========================================================
Jaime:

basically, the procedure would be: Creating a layout function that renders the tree as you like. 2) creating a functions that perform actions on the tree as it would be offline. 3) registering those actions in the webplugin, so there is an option in the context menu that triggers the backend method


QObject::startTimer: QTimer can only be used with threads started with QThread
start the server in single thread solves the problem


Download from 
pip install https://github.com/etetoolkit/ete/archive/master.zip


/usr/local/lib/python2.7/dist-packages/ete3-3.0.0b35-py2.7.egg/ete3/treeview


install xvfb
then run the webplugin server as xvfb-run python test_phylotastic.py
xvfb-run creates a virtual x server and sets up the env for ete or any other program to use it.

xvfb-run -a python webapi.py
----------------------------------------------------------
extra_data:
{
	"tip_data_headers": ["habitat", "mass"],
	"tip_list": [{
		"tip_name": "Rangifer tarandus",
		"tip_data_values": ["herbivore", 109.09],
        "tip_data_colors": ["steelblue", "steelblue"]
	}, {
		"tip_name": "Cervus elaphus",
		"tip_data_values": ["herbivore", 240.87],
        "tip_data_colors": ["steelblue", "steelblue"]
	},
    {
		"tip_name": "Bos taurus",
		"tip_data_values": ["herbivore", 618.64],
        "tip_data_colors": ["steelblue", "steelblue"]
	},
	{
		"tip_name": "Ovis orientalis",
		"tip_data_values": ["herbivore", 39.1],
        "tip_data_colors": ["steelblue", "steelblue"]
	},
	{
		"tip_name": "Suricata suricatta",
		"tip_data_values": ["carnivore", 0.73],
        "tip_data_colors": ["yellowgreen", "yellowgreen"]
	},
	{
		"tip_name": "Mephitis mephitis",
		"tip_data_values": ["omnivore", 2.4],
        "tip_data_colors": ["tan", "tan"]
	}
    ],
    "node_label_list": [
       {
        "node_name": "Cervidae",
	    "node_label": "7 steps"
       }
    ]
}





========================================================

<p>Click the "Try it" button to toggle between hiding and showing the DIV element:</p>

<button onclick="myFunction()">Try it</button>

<div id="myDIV">
This is my DIV element.
</div>

<p>Note that even though the element is hidden, it stays in its original position and size.</p>

<script>
function myFunction() {
    var x = document.getElementById('myDIV');
    if (x.style.visibility === 'hidden') {
        x.style.visibility = 'visible';
    } else {
        x.style.visibility = 'hidden';
    }
}
</script>




